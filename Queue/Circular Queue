Problem:

https://www.codingninjas.com/studio/problems/circular-queue_1170058?leftPanelTabValue=PROBLEM


Solution:

#include <bits/stdc++.h> 
class CircularQueue{
    int* arr;
    int front;
    int rear;
    int size;

    public:
    // Initialize your data structure.
    CircularQueue(int n){
        size = n;
        arr = new int[size];
        front = rear = -1;
    }

    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value){
        //to check whther queue is full
        if((front == 0 && rear == size-1)||(front == rear+1)){
            return false;
        }
        //first element to push
        else if(front == -1){  
            front = rear = 0;
            arr[rear] = value;
        }
        else if((rear == size-1) && (front != 0)){
            rear = 0;  //to maintain cyclic nature
            arr[rear] = value;
        }
        else{
            rear++;
            //push inside the queue
            arr[rear] = value;
        }
        return true;
    }

    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue(){
        if(front == -1){  //to check queue is empty
            return -1;
        }
        int ans = arr[front];
        arr[front] = -1;

        //single element is present in queue
        if(front == rear){
            front = rear = -1;
        }
        else if(front == size-1){
            front = 0;  //To maintain cyclic nature
        }
        else{
            front++;
        }
        return ans;
    }
};

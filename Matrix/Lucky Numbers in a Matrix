Problem:

Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.
A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

Example 1:
Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.

Example 2:
Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.

Example 3:
Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.



Solution:

//Time Complexity: O(n*m)
//Space Complexity: O(n+m)

class Solution {
public:
    vector<int> luckyNumbers (vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<int> rowMin(n, INT_MAX);
        vector<int> colMax(m, INT_MIN);
        
        // Find the minimum element in each row
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                rowMin[i] = min(rowMin[i], matrix[i][j]);
            }
        }
        
        // Find the maximum element in each column
        for(int j = 0; j < m; j++) {
            for(int i = 0; i < n; i++) {
                colMax[j] = max(colMax[j], matrix[i][j]);
            }
        }
        
        // Find the lucky numbers
        vector<int> luckyNumbers;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(matrix[i][j] == rowMin[i] && matrix[i][j] == colMax[j]) {
                    luckyNumbers.push_back(matrix[i][j]);
                }
            }
        }
        
        return luckyNumbers;
    }
};

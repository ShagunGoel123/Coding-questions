Problem:

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times.
You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2



Solution:

//Approach 1:

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        return nums[n/2];
    }
};


//Approach 2:

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        if(nums.size() == 1){
            return nums[0];
        }

        sort(nums.begin(), nums.end());
        int count = 1, value = 0, n = nums.size();

        for(int i = 1; i < n; i++)
        {
            if(nums[i] == nums[i - 1])
            {
                count++;
                if(count > (n / 2))
                {
                    value = nums[i];
                    break;
                }
            }
        }
        return value;
    }
};

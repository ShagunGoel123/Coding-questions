Problem:

You are given an array of strings names, and an array heights that consists of distinct positive integers. 
Both arrays are of length n.
For each index i, names[i] and heights[i] denote the name and height of the ith person.
Return names sorted in descending order by the people's heights.

Example 1:
Input: names = ["Mary","John","Emma"], heights = [180,165,170]
Output: ["Mary","Emma","John"]
Explanation: Mary is the tallest, followed by Emma and John.

Example 2:
Input: names = ["Alice","Bob","Bob"], heights = [155,185,150]
Output: ["Bob","Alice","Bob"]
Explanation: The first Bob is the tallest, followed by Alice and the second Bob.



Solution:

//Time Complexity: O(nlogn)
//Space Complexity: O(n)

class Solution {
public:
    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {
        int n = names.size();
        // Create an unordered map to map heights to names
        unordered_map<int, string> mp;

        // Populate the map with heights as keys and names as values
        for(int i=0;i<n;i++){
            mp[heights[i]] = names[i];
        }

        // Sort the heights in descending order using reverse iterators
        sort(heights.rbegin(), heights.rend());
  
        // Reorder the names vector according to the sorted heights
        for(int i=0;i<n;i++){
            names[i] = mp[heights[i]];
        }
        // Return the reordered names vector
        return names;   
    }
};

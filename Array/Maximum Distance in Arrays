Problem:

You are given m arrays, where each array is sorted in ascending order.
You can pick up two integers from two different arrays (each array picks one)
and calculate the distance. We define the distance between two integers a and b
to be their absolute difference |a - b|.
Return the maximum distance.

Example 1:
Input: arrays = [[1,2,3],[4,5],[1,2,3]]
Output: 4
Explanation: One way to reach the maximum distance 4 is to pick 1 in the first
or third array and pick 5 in the second array.

Example 2:
Input: arrays = [[1],[1]]
Output: 0



Solution:

//Time Complexity: O(n)
//Space Complexity: O(1)

class Solution {
public:
    int maxDistance(vector<vector<int>>& arrays) {
        int minVal = arrays[0][0];
        int maxVal = arrays[0].back();
        int maxDistance = 0;

        for(int i=1;i<arrays.size();i++){
            // Calculate the potential maximum distance using the current array
            // 1. Difference between the last element of the current array 
            // and the global minVal
            // 2. Difference between the global maxVal and the first element
            // of the current array
            // Then take the maximum of these two differences and update maxDistance 
            //if it's larger
            maxDistance = max(maxDistance, max(abs(arrays[i].back()-minVal),
             abs(maxVal-arrays[i][0])));

            minVal = min(minVal, arrays[i][0]);
            maxVal = max(maxVal, arrays[i].back());
        }
        return maxDistance;
    }
};
 

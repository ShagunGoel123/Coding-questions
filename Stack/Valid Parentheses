Problem:

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']',
determine if the input string is valid.

An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 
Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false



Solution:

//Time complexity = O(n)
//Space complexity = O(n)  where n is length of string

class Solution {
public:
    bool isValid(string s) {
        char ch;
        bool ans = false;
        stack<char>st;
        for(int i=0;i<s.length();i++){
           char ch = s[i];
        //if opening bracket,push bracket in stack
        //if closing bracket, check stacktop and pop

        //For opening bracket
          if(ch=='(' || ch=='{' || ch=='['){
            st.push(ch);
           }
        //For closing bracket
            else{
               if(!st.empty()){
                  char top = st.top();
                  if((ch == ')' && top == '(') || (ch == '}' && top == '{') || (ch == ']' && top == '[')){
                    st.pop();
                  }
                  else{
                     return false;
                  }    
               }
              else{
                 return false;
              }
          } 
      }  //end of for loop

            //after pop brackets if stack is empty then return true
             if(st.empty()){
                    ans = true;
                }
                else{
                    ans = false;
                }     
        return ans;
    }       
};

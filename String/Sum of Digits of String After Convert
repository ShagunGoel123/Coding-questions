Problem:

You are given a string s consisting of lowercase English letters, and an integer k.
First, convert s into an integer by replacing each letter with its position in the alphabet 
(i.e., replace 'a' with 1, 'b' with 2, ..., 'z' with 26). 
Then, transform the integer by replacing it with the sum of its digits.
Repeat the transform operation k times in total.

For example, if s = "zbax" and k = 2, then the resulting integer would be 8 by the following operations:
Convert: "zbax" ➝ "(26)(2)(1)(24)" ➝ "262124" ➝ 262124
Transform #1: 262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17
Transform #2: 17 ➝ 1 + 7 ➝ 8
Return the resulting integer after performing the operations described above.

Example 1:
Input: s = "iiii", k = 1
Output: 36
Explanation: The operations are as follows:
- Convert: "iiii" ➝ "(9)(9)(9)(9)" ➝ "9999" ➝ 9999
- Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36
Thus the resulting integer is 36.

Example 2:
Input: s = "leetcode", k = 2
Output: 6
Explanation: The operations are as follows:
- Convert: "leetcode" ➝ "(12)(5)(5)(20)(3)(15)(4)(5)" ➝ "12552031545" ➝ 12552031545
- Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33
- Transform #2: 33 ➝ 3 + 3 ➝ 6
Thus the resulting integer is 6.

Example 3:
Input: s = "zbax", k = 2
Output: 8



Solution:

//Time Complexity: O(k*n)
//Space Complexity: O(n), due to the storage of the intermediate numeric string.

class Solution {
public:
    int getLucky(string s, int k) {
        // Convert each character in the string to its corresponding numeric value
        string number = "";
        for(char x : s){
            /*
            Suppose s = "abc".
            For each character x:
            x = 'a', then x - 'a' + 1 = 1, which is an integer.
            to_string(1) converts the integer 1 to the string "1".
            "1" is then appended to number.
            After processing all characters, number would contain "123".
            */
            number += to_string(x-'a'+1);
        }
        while(k > 0){
            int temp = 0;
            for(char x : number){
                /*
                Characters in C++ are stored as ASCII values.
                The character '0' has an ASCII value of 48,
                '1' has an ASCII value of 49, '2' is 50, and so on.
                Subtracting '0' from x converts the character digit 
                to its corresponding integer value.
                For example, if x is '3', then x - '0' equals 3 
                (since '3' has an ASCII value of 51 and '0' has an
                 ASCII value of 48, so 51 - 48 = 3).
                */
                temp += x-'0';
            }
            number = to_string(temp);
            k--;
        }
        // Return the final result as an integer
        return stoi(number);
    }
};

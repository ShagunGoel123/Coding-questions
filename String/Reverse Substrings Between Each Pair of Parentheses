Problem:

You are given a string s that consists of lower case English letters and brackets.
Reverse the strings in each pair of matching parentheses, starting from the innermost one.
Your result should not contain any brackets.

Example 1:
Input: s = "(abcd)"
Output: "dcba"

Example 2:
Input: s = "(u(love)i)"
Output: "iloveu"
Explanation: The substring "love" is reversed first, then the whole string is reversed.

Example 3:
Input: s = "(ed(et(oc))el)"
Output: "leetcode"
Explanation: First, we reverse the substring "oc", then "etco", and finally, the whole string.



Solution:

//Time Complexity: O(n)
//Space Complexity: O(n)

// Helper function that processes the string and handles the reversal of parentheses
string helper(string &s, int &i){
    string result;
    while(i<s.length()){
        if(s[i] == ')'){
            i++;
            reverse(result.begin(), result.end());
            return result;
        }
        else if(s[i] == '('){
            i++;
            string st = helper(s,i);
            // Append the reversed substring to the result
            result += st;
        }
        else{
             // If it's a regular character, append it to the result
            result += s[i];
            i++;
        }
    }
    return result;
}

class Solution {
public:
    int i=0;
    string reverseParentheses(string s) {
        return helper(s,i);
    }
};

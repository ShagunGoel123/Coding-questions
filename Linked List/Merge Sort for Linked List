Problem:

Given Pointer/Reference to the head of the linked list, the task is to Sort the given linked list using Merge Sort.
Note: If the length of linked list is odd, then the extra node should go in the first list while splitting.

Example 1:
Input:
N = 5
value[]  = {3,5,2,4,1}
Output: 1 2 3 4 5
Explanation: After sorting the given
linked list, the resultant matrix
will be 1->2->3->4->5.

Example 2:
Input:
N = 3
value[]  = {9,15,0}
Output: 0 9 15
Explanation: After sorting the given
linked list , resultant will be
0->9->15.



Solution:

//Time complexity = O(nlog n)
//Space complexity = O(log n)

class Solution{
 private:
  Node* findMid(Node* head){
        Node* slow = head;
        Node* fast = head->next;
        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    
    Node* merge(Node* left,Node* right){
        if(left==NULL){
            return right;
        }
        if(right==NULL){
            return left;
        }
        Node* ans = new Node(-1);
        Node* temp = ans;
        
        //merge two sorted Linked list
        while(left!=NULL && right!=NULL){
            if(left->data < right->data){
                temp->next = left;
                temp = left;
                left = left->next;
            }
            else{
                temp->next = right;
                temp = right;
                right = right->next;
            }
        }
        
        while(left!=NULL){
            temp->next = left;
            temp = left;
            left = left->next;
        }
        
        while(right!=NULL){
            temp->next = right;
            temp = right;
            right = right->next;
        }
        ans = ans->next;
        return ans;
    }
   
   public:
    //Function to sort the given linked list using Merge Sort.
    Node* mergeSort(Node* head) {
        //base case
        if(head==NULL || head->next== NULL){
            return head;
        }
        //break linked list into 2 halves,after finding mid
        Node* mid = findMid(head);
        Node* left = head;
        Node* right = mid->next;
        mid->next = NULL;
        
        //recursive calls to sort both halves
        left = mergeSort(left);
        right = mergeSort(right);
        
        //merge both left and right halves
        Node* result = merge(left,right);
        
        return result;
    }
};

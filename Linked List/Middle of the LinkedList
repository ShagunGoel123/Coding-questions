Problem:

Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.



Solution:

class Solution {
public:
    int getlength(ListNode* head){
        int len=0;
        //Traverse LinkedList and find length 
        while(head!=NULL){
            len++;
            head = head->next;
        }
        return len;
    }

    ListNode* middleNode(ListNode* head) {
        int len = getlength(head);
        int ans = (len/2);
        int count=0;
        ListNode* temp = head;
        while(count<ans){
            temp = temp->next;
            count++;
        }
        return temp;
    }
};

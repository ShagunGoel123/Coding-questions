Problem:

Given two decimal numbers represented by two linked lists of size N and M respectively. 
The task is to return a linked list that represents the sum of these two numbers.
For example, the number 190 will be represented by the linked list, 1->9->0->null, similarly 25 by 2->5->null.
Sum of these two numbers is 190 + 25 = 215, which will be represented by 2->1->5->null. 
You are required to return the head of the linked list 2->1->5->null.

Example 1:
Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).

Example 2:
Input:
N = 2
valueN[] = {6,3}
M = 1
valueM[] = {7}
Output: 7 0
Explanation: For the given two linked
list (6 3) and (7), after adding the
two linked list resultant linked list
will be (7 0).



Solution:

//Time complexity = O(N+M)
//Space complexity = O(Max(N,M))

class Solution
{
    private:
    Node* reverse(Node* head){
      Node* curr = head;
      Node* prev = NULL;
      Node* next = NULL;
      
      while(curr!=NULL){
          next = curr->next;
          curr->next = prev;
          prev = curr;
          curr = next;
      }
      return prev;
    }
    
    void insertAtTail(struct Node* &head, struct Node* &tail, int val){
        Node* temp = new Node(val);
        //Empty List
        if(head == NULL){
            head = temp;
            tail = temp;
            return;
        }
        else{
            tail->next = temp;
            tail = temp;
        }
    }
    
    struct Node* add(struct Node* first, struct Node* second){
        int carry = 0;
        
        Node* ansHead = NULL;
        Node* ansTail = NULL;
        
        while(first!=NULL || second!=NULL || carry!=0){
            int val1 = 0;
            if(first!=NULL){
                val1 = first->data;
            }
            
            int val2 = 0;
            if(second!=NULL){
                val2 = second->data;
            }
            
            int sum = carry + val1 + val2;
            int digit = sum%10;
            
            //Create node and add in answer Linked list
            insertAtTail(ansHead,ansTail,digit);
            carry = sum/10;
            
            if(first!=NULL)
                first = first->next;
            if(second!=NULL)    
                second = second->next;
        }      
        return ansHead;
    }

    public:
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        //Step1 = Reverse input Linked list
        first = reverse(first);
        second = reverse(second);
        
        //Step2 = Add two Linked list
        Node* ans = add(first,second);
        
        //Step3 = Reverse ans Linked list
        ans = reverse(ans);
        
        return ans;
    }
};

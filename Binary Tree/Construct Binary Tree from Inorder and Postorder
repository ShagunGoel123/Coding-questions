Problem:

Given inorder and postorder traversals of a binary tree(having n nodes)
in the arrays in[] and post[] respectively. The task is to construct a
binary tree from these traversals.
Driver code will print the preorder traversal of the constructed tree.

Example 1:

Input:
n = 8
in[] = {4, 8, 2, 5, 1, 6, 3, 7}
post[] = {8, 4, 5, 2, 6, 7, 3, 1}
Output: 
1 2 4 8 5 3 6 7
Explanation: 
For the given postorder and inorder traversal of tree the  resultant binary tree will be
          1
       /     \
     2        3
   /  \      /  \
  4    5    6     7
   \
    8


Example 2:
Input:
n = 5
in[] = {9, 5, 2, 3, 4}
post[] = {5, 9, 3, 4, 2}
Output: 
2 9 5 4 3
Explanation:  
The  resultant binary tree will be
           2
        /     \
       9       4
        \     /
         5   3



Solution:

class Solution{
    public:
    
    int findposition(int element , int in[] , int start , int end)
    {
        for(int i = start ; i <= end ; i++)
        {
            if(in[i] == element)
            {
                return i;
            }
        }
        return -1;
    }
    
    Node* solve(int in[],int post[], int n, int& postorderindex , int inorder_start , int  inorder_end)
    {
        if(postorderindex < 0 || inorder_start > inorder_end)
        {
            return NULL;
        }
        
        int element = post[postorderindex];
        Node* root = new Node(element);
        
        int position = findposition(element,in ,inorder_start , inorder_end);
        
        postorderindex--;
        
        //right call phle aayegi qki index right part me hoga so we first built right subtree
        root-> right = solve(in , post , n , postorderindex, position + 1 , inorder_end);
        root->left = solve(in,post,n,postorderindex, inorder_start , position - 1);
       
        return root;
    }
    
    Node* buildTree(int in[],int post[], int n)
    {
        int postorderindex = n-1;
        
        Node* temp = solve(in,post,n, postorderindex, 0 , n-1);
        
        return temp;
    }
};

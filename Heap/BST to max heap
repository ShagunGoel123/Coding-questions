Problem:

Given a Binary Search Tree. Convert a given BST into a Special Max Heap with the condition
that all the values in the left subtree of a node should be less than all the values
in the right subtree of the node. This condition is applied on all the nodes in the so converted Max Heap.

Example 1:
Input :
                 4
               /   \
              2     6
            /  \   /  \
           1   3  5    7  

Output : 1 2 3 4 5 6 7 
Exaplanation :
               7
             /   \
            3     6
          /   \  /   \
         1    2 4     5
The given BST has been transformed into a
Max Heap and it's postorder traversal is
1 2 3 4 5 6 7.



Solution:

//Time Complexity: O(n)
//Space Complexity: O(n)

class Solution{
  public:
  
    void getInorder(Node* root, vector<int> &arr){
        //base case
        if(root == NULL){
            return;
        }
        getInorder(root->left, arr);
        arr.push_back(root->data);
        getInorder(root->right, arr);
    }
    
    void fillPostorder(Node* root, vector<int> &inorder, int &i){
        //base case
        if(root ==  NULL){
            return;
        }
        fillPostorder(root->left, inorder, i);
        fillPostorder(root->right, inorder, i);
        root->data = inorder[i++];
    }
    void convertToMaxHeapUtil(Node* root)
    {
        //Step1: Find inorder
        vector<int> inorder;
        getInorder(root, inorder);
        
        //Step2: fill the postorder
        int i=0;
        fillPostorder(root, inorder, i);
    }    
};

